#!/bin/sh
# Bind the various services
# These should be updated on every container start
if [ -z ${IP} ]; then
 IP=`hostname --ip-address`
fi
#echo $IP > /data/ip.address




SEEDS=${SEEDS:-${IP}}

MAX_HEAP_SIZE=${MAX_HEAP_SIZE:-2G}
HEAP_NEWSIZE=${HEAP_NEWSIZE:-800M}


# create directories for holding the node's data, logs, etc.
create_dirs() {
 local base_dir=$1;
 mkdir -p $base_dir/data/commitlog
 mkdir -p $base_dir/data/saved_caches
 mkdir -p $base_dir/logs
}
# copy the relevant sections of the config for a service (includes bin for
# selected services like cassandra or hadoop)
copy_config() {
 base_dst_dir=$1
 base_dir=$2
 service=$3
 src="$base_dir/resources/$service/conf"
 dst="$base_dst_dir/$service"
 cp -r $src $dst
}
# tweak the cassandra config
tweak_cassandra_config() {
 env="$1/cassandra-env.sh"
 conf="$1/cassandra.yaml"
 base_data_dir="/data"
 # Set the cluster name
 if [ -z "${CLUSTER_NAME}" ]; then
 printf " - No cluster name provided; skipping.\n"
 else

 printf " - Setting up the cluster name: ${CLUSTER_NAME}\n"
 regexp="s/Test Cluster/${CLUSTER_NAME}/g"
 sed -i -- "$regexp" $conf
 fi
 # Set the commitlog directory, and various other directories
 # These are done only once since the regexep matches will fail on subsequent
 # runs.
 printf " - Setting up directories\n"
 regexp="s|/var/lib/cassandra/|$base_data_dir/|g"
 sed -i -- "$regexp" $conf
 regexp="s/^listen_address:.*/listen_address: ${IP}/g"
 sed -i -- "$regexp" $conf
 regexp="s/rpc_address:.*/rpc_address: ${IP}/g"
 sed -i -- "$regexp" $conf
 # seeds
 if [ -z "${SEEDS}" ]; then
 printf " - Using own IP address ${IP} as seed.\n";
 regexp="s/seeds:.*/seeds: \"${IP}\"/g";
 else
 printf " - Using seeds: $SEEDS\n";
 regexp="s/seeds:.*/seeds: \"${SEEDS}\"/g"
 fi
 sed -i -- "$regexp" $conf
 # JMX
 echo "JVM_OPTS=\"\$JVM_OPTS -Djava.rmi.server.hostname=127.0.0.1\"" >> $env
}

tweak_cassandra_rack_config(){
    conf="$1/cassandra-rackdc.properties"
    if [ -z "${DC_NAME}" ]; then
      printf "using default dc name\n";
    else 
      printf "Setting DC name: ${DC_NAME}\n"
      regexp="s/^dc=.*/dc=${DC_NAME}/g"
      sed -i -- "$regexp" $conf
    fi

    if [ -z "${RACK_NAME}" ]; then
      printf "using default rack name\n";
    else 
      printf "Setting DC name: ${RACK_NAME}\n"
      regexp="s/^rack=.*/rack=${RACK_NAME}/g"
      sed -i -- "$regexp" $conf
    fi
   
}

tweak_cassandra_mem(){
  conf="$1/cassandra-env.sh"
  regexp="s/^#MAX_HEAP_SIZE=.*/MAX_HEAP_SIZE=1G/g"
  sed -i -- "$regexp" $conf
  regexp="s/^#HEAP_NEWSIZE=.*/HEAP_NEWSIZE=500M/g"
  sed -i -- "$regexp" $conf
}

tweak_agent_config() {
[ -d "$OPSC_ADDR_DIR" ] && cat > $OPSC_ADDR_DIR/address.yaml <<EOF
cassandra_conf: /conf/cassandra/cassandra.yaml
local_interface: ${IP}
hosts: ["${IP}"]
cassandra_install_location: /opt/dse
cassandra_log_location: /logs
EOF
}
setup_resources() {
 printf " - Copying configs\n"
 copy_config $1 $2 "cassandra"
 copy_config $1 $2 "dse"
 copy_config $1 $2 "sqoop"
 copy_config $1 $2 "mahout"
 copy_config $1 $2 "shark"
 copy_config $1 $2 "tomcat"
}
setup_node() {
 printf "* Setting up node...\n"
 printf " + Setting up node...\n"
 create_dirs
 setup_resources "/conf" ${DSE_HOME}
 tweak_cassandra_config "/conf/cassandra"
 tweak_cassandra_rack_config "/conf/cassandra"
 tweak_cassandra_mem  "/conf/cassandra"
 tweak_agent_config
 chown -R dse:dse /data /logs /conf
 printf "Done.\n"
}
# if conf dir is empty, generate config
#rm -rf   $CONF_DIR/*
#[ -z "$(ls -A $CONF_DIR)" ] && setup_node
